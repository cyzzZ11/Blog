(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{458:function(i,t,v){"use strict";v.r(t);var _=v(27),g=Object(_.a)({},(function(){var i=this,t=i.$createElement,v=i._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h1",{attrs:{id:"常用git命令总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用git命令总结"}},[i._v("#")]),i._v(" 常用Git命令总结")]),i._v(" "),v("ul",[v("li",[i._v('git config --global user.name "你的名字" 让你全部的Git仓库绑定你的名字')]),i._v(" "),v("li",[i._v('git config --global user.email "你的邮箱" 让你全部的Git仓库绑定你的邮箱')]),i._v(" "),v("li",[i._v("git init 初始化你的仓库")]),i._v(" "),v("li",[i._v("git add . 把工作区的文件全部提交到暂存区")]),i._v(" "),v("li",[i._v("git add ./"),v("file",[i._v("/ 把工作区的"),v("file",[i._v("文件提交到暂存区")])],1)],1),i._v(" "),v("li",[i._v('git commit -m "xxx" 把暂存区的所有文件提交到仓库区，暂存区空空荡荡')]),i._v(" "),v("li",[i._v("git remote add origin https://github.com/name/name_cangku.git 把本地仓库与远程仓库连接起来")]),i._v(" "),v("li",[i._v("git push -u origin master 把仓库区的主分支master提交到远程仓库里")]),i._v(" "),v("li",[i._v("git push -u origin <其他分支> 把其他分支提交到远程仓库")]),i._v(" "),v("li",[i._v("git status查看当前仓库的状态")]),i._v(" "),v("li",[i._v("git diff 查看文件修改的具体内容")]),i._v(" "),v("li",[i._v("git log 显示从最近到最远的提交历史  git log --pretty=oneline(更简洁的方式显示)")]),i._v(" "),v("li",[i._v("git clone + 仓库地址下载克隆文件")]),i._v(" "),v("li",[i._v("git reset --hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起")]),i._v(" "),v("li",[i._v("git reflog 显示命令历史")]),i._v(" "),v("li",[i._v("git checkout -- "),v("file",[i._v(" 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z")])],1),i._v(" "),v("li",[i._v("git rm 删除版本库的文件")]),i._v(" "),v("li",[i._v("git branch 查看当前所有分支")]),i._v(" "),v("li",[i._v("git branch <分支名字> 创建分支")]),i._v(" "),v("li",[i._v("git checkout <分支名字> 切换到分支")]),i._v(" "),v("li",[i._v("git merge <分支名字> 合并分支")]),i._v(" "),v("li",[i._v("git branch -d <分支名字> 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支")]),i._v(" "),v("li",[i._v("git branch -D + <分支名字> 强行删除，丢弃没被合并的分支")]),i._v(" "),v("li",[i._v("git log --graph 查看分支合并图")]),i._v(" "),v("li",[i._v("git merge --no-ff <分支名字> 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息")]),i._v(" "),v("li",[i._v("git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作")]),i._v(" "),v("li",[i._v("git stash list 查看你刚刚“存放”起来的工作去哪里了")]),i._v(" "),v("li",[i._v("git stash apply 恢复却不删除stash内容")]),i._v(" "),v("li",[i._v("git stash drop 删除stash内容")]),i._v(" "),v("li",[i._v("git stash pop 恢复的同时把stash内容也删了")]),i._v(" "),v("li",[i._v("git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin")]),i._v(" "),v("li",[i._v("git remote -v 显示更详细的信息")]),i._v(" "),v("li",[i._v("git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反")]),i._v(" "),v("li",[i._v("git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观")]),i._v(" "),v("li",[i._v("git tag 查看所有标签，可以知道历史版本的tag")]),i._v(" "),v("li",[i._v("git tag "),v("name",[i._v(" 打标签，默认为HEAD。比如git tag v1.0")])],1),i._v(" "),v("li",[i._v("git tag "),v("tagName",[i._v(" <版本号> 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字")])],1),i._v(" "),v("li",[i._v("git show "),v("tagName",[i._v(" 查看标签信息")])],1),i._v(" "),v("li",[i._v("git tag -a "),v("tagName",[i._v(' -m "<说明>" 创建带说明的标签。-a指定标签名，-m指定说明文字')])],1),i._v(" "),v("li",[i._v("git tag -d "),v("tagName",[i._v(" 删除标签")])],1),i._v(" "),v("li",[i._v("git push origin "),v("tagname",[i._v(" 推送某个标签到远程")])],1),i._v(" "),v("li",[i._v("git push origin --tags 一次性推送全部尚未推送到远程的本地标签")]),i._v(" "),v("li",[i._v("git push origin :refs/tags/"),v("tagname",[i._v(" 删除远程标签"),v("tagname")],1)],1),i._v(" "),v("li",[i._v("git config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目")]),i._v(" "),v("li",[i._v("git add -f "),v("file",[i._v(" 强制提交已忽略的的文件")])],1),i._v(" "),v("li",[i._v("git check-ignore -v "),v("file",[i._v(" 检查为什么Git会忽略该文件")])],1)])])}),[],!1,null,null,null);t.default=g.exports}}]);